<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[AlexYoung's blog]]></title>
  <subtitle><![CDATA[Do Not Go Gentle Into Life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://alexyyek.github.io/"/>
  <updated>2014-12-04T07:49:24.480Z</updated>
  <id>http://alexyyek.github.io/</id>
  
  <author>
    <name><![CDATA[AlexYoung]]></name>
    <email><![CDATA[alexyyek@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Trapping Rain Water]]></title>
    <link href="http://alexyyek.github.io/2014/12/04/TrappingRainWater/"/>
    <id>http://alexyyek.github.io/2014/12/04/TrappingRainWater/</id>
    <published>2014-12-04T07:17:18.000Z</published>
    <updated>2014-12-04T07:49:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Trapping_Rain_Water">Trapping Rain Water</h2>
<p>Question : Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.<br><a id="more"></a><br>For example:<br>Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.</p>
<p><img src="http://leetcode.com/wp-content/uploads/2012/08/rainwatertrap.png" alt=""></p>
<h3 id="Best_Solution">Best Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span>(<span class="keyword">int</span>[] A) {</div><div class="line">		<span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> b = A.length - <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> leftmax = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> rightmax = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (a &lt;= b) {</div><div class="line">			leftmax = Math.max(leftmax, A[a]);</div><div class="line">			rightmax = Math.max(rightmax, A[b]);</div><div class="line">			<span class="keyword">if</span> (leftmax &lt; rightmax) {</div><div class="line">				max += (leftmax - A[a]); </div><div class="line">				a++;</div><div class="line">			} <span class="keyword">else</span> {</div><div class="line">				max += (rightmax - A[b]);</div><div class="line">				b--;</div><div class="line">			}</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> max;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>Analyze</strong> : I calculated the stored water at each index a and b in my code. At the start of every loop, I update the current maximum height from left side (that is from A[0,1…a]) and the maximum height from right side(from A[b,b+1…n-1]). if(leftmax &lt; rightmax) then, at least (leftmax-A[a]) water can definitely be stored no matter what happens between [a,b] since we know there is a barrier at the rightside(rightmax &gt; leftmax).</p>
]]></content>
    <summary type="html">
    <![CDATA[Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.]]>
    
    </summary>
    
      <category term="Arrays" scheme="http://alexyyek.github.io/tags/Arrays/"/>
    
      <category term="leetcode" scheme="http://alexyyek.github.io/tags/leetcode/"/>
    
      <category term="Java" scheme="http://alexyyek.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Simplify Path]]></title>
    <link href="http://alexyyek.github.io/2014/11/30/SimplifyPath/"/>
    <id>http://alexyyek.github.io/2014/11/30/SimplifyPath/</id>
    <published>2014-11-30T13:13:12.000Z</published>
    <updated>2014-12-01T05:04:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Simplify_Path">Simplify Path</h2>
<p>Question:Given an absolute path for a file (Unix-style), simplify it.<br><a id="more"></a></p>
<p>For example,<br>path = <code>/home/</code> =&gt; <code>/home</code><br>path = <code>/a/./b/../../c/</code> =&gt; <code>/c</code><br><br></p>
<table>
<thead>
<tr>
<th>Situation</th>
<th style="text-align:center">Meaning</th>
<th style="text-align:center">Solution</th>
</tr>
</thead>
<tbody>
<tr>
<td>/..</td>
<td style="text-align:center">返回上级目录</td>
<td style="text-align:center">若stack不空，stack.pop()</td>
</tr>
<tr>
<td>/.</td>
<td style="text-align:center">留在本目录</td>
<td style="text-align:center">无操作</td>
</tr>
<tr>
<td>/</td>
<td style="text-align:center">多余的slash</td>
<td style="text-align:center">无操作</td>
</tr>
<tr>
<td>other</td>
<td style="text-align:center">有效目录名</td>
<td style="text-align:center">入栈</td>
</tr>
</tbody>
</table>
<h3 id="My_solution">My solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">soluition</span>(String path) {</div><div class="line">        String[] unit = path.split(<span class="string">"/"</span>);</div><div class="line">        StringBuffer line = <span class="keyword">new</span> StringBuffer();</div><div class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; unit.length; i++) {</div><div class="line">        	<span class="keyword">if</span> (!unit[i].equals(<span class="string">""</span>)) {</div><div class="line">        		<span class="keyword">if</span> (unit[i].equals(<span class="string">"."</span>)) {</div><div class="line">    				<span class="keyword">continue</span>;</div><div class="line">    			}<span class="keyword">else</span> <span class="keyword">if</span> (unit[i].equals(<span class="string">".."</span>)) {</div><div class="line">    				<span class="keyword">if</span> (!stack.isEmpty()) {</div><div class="line">    					stack.pop();</div><div class="line">        				stack.pop();</div><div class="line">					}</div><div class="line">    			}<span class="keyword">else</span> {</div><div class="line">    				stack.push(<span class="string">"/"</span>);</div><div class="line">    				stack.push(unit[i]);</div><div class="line">    			}</div><div class="line">			}</div><div class="line">		}</div><div class="line">        <span class="keyword">if</span> (stack.isEmpty()) {</div><div class="line">			<span class="keyword">return</span> <span class="string">"/"</span>;</div><div class="line">		}<span class="keyword">else</span> {</div><div class="line">			<span class="keyword">while</span> (!stack.isEmpty()) {</div><div class="line">				line.insert(<span class="number">0</span>, stack.pop());</div><div class="line">			}</div><div class="line">			<span class="keyword">return</span> line.toString();</div><div class="line">		}</div><div class="line">    }</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[Question:Given an absolute path for a file (Unix-style), simplify it.]]>
    
    </summary>
    
      <category term="stack" scheme="http://alexyyek.github.io/tags/stack/"/>
    
      <category term="leetcode" scheme="http://alexyyek.github.io/tags/leetcode/"/>
    
      <category term="Java" scheme="http://alexyyek.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Valid Parentheses]]></title>
    <link href="http://alexyyek.github.io/2014/11/28/valid-parentheses/"/>
    <id>http://alexyyek.github.io/2014/11/28/valid-parentheses/</id>
    <published>2014-11-28T14:42:18.000Z</published>
    <updated>2014-11-29T06:16:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Valid_Parentheses">Valid Parentheses</h2>
<p>Question：Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.<br>The brackets must close in the correct order, <code>()</code> and <code>()[]{}</code> are all valid but <code>(]</code> and <code>([)]</code> are not.<br><a id="more"></a>  </p>
<h3 id="Best_Solution">Best Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(String s){</div><div class="line">		HashMap&lt;Character, Character&gt;map = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</div><div class="line">		map.put(<span class="string">'('</span>, <span class="string">')'</span>);</div><div class="line">		map.put(<span class="string">'['</span>, <span class="string">']'</span>);</div><div class="line">		map.put(<span class="string">'{'</span>, <span class="string">'}'</span>);</div><div class="line">		</div><div class="line">		Stack&lt;Character&gt;stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) {</div><div class="line">			<span class="keyword">char</span> head = s.charAt(i);</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (map.containsKey(head)) {</div><div class="line">				stack.push(head);</div><div class="line">			}<span class="keyword">else</span> <span class="keyword">if</span> (map.values().contains(head)) {</div><div class="line">				<span class="keyword">if</span> (!stack.isEmpty() && map.get(stack.peek()).equals(head)) {</div><div class="line">					stack.pop();</div><div class="line">				}<span class="keyword">else</span> {</div><div class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> stack.isEmpty();</div><div class="line">	}</div></pre></td></tr></table></figure>

<p><strong>Analyze</strong>：思想非常简单，当看到左括号的时候就push入栈，看到右括号时与stack.peek相匹配，匹配成功则pop，如果字符串valid，则stack.isEmpty会为true，即所有左括号都匹配到对应的右括号。<br>PS. 一定要在else if内加栈空判断，防止字符串以右括号开始，如<code>}[()]</code><br><br></p>
<h3 id="My_Solution">My Solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span>(String s){</div><div class="line">		HashMap&lt;String, String&gt;map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">		map.put(<span class="string">"("</span>, <span class="string">")"</span>);</div><div class="line">		map.put(<span class="string">"["</span>, <span class="string">"]"</span>);</div><div class="line">		map.put(<span class="string">"{"</span>, <span class="string">"}"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (s.length()%<span class="number">2</span> != <span class="number">0</span>) {</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		}</div><div class="line">		</div><div class="line">		Stack&lt;String&gt;stack = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = s.length(); i &gt; <span class="number">0</span>; i--) {</div><div class="line">			stack.push(s.substring(i-<span class="number">1</span>, i));</div><div class="line">		}</div><div class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (!map.containsKey(stack.peek())) {</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="keyword">while</span> (!stack.isEmpty()) {</div><div class="line">			String head = stack.pop();</div><div class="line">			<span class="keyword">if</span> (map.containsKey(head)) {</div><div class="line">				list.add(head);</div><div class="line">			}<span class="keyword">else</span> {</div><div class="line">				<span class="keyword">if</span> (head.equals(map.get(list.get(list.size() - <span class="number">1</span>)))) {</div><div class="line">					list.remove(list.size() - <span class="number">1</span>);</div><div class="line">				}<span class="keyword">else</span> {</div><div class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (!list.isEmpty()) {</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		}<span class="keyword">else</span> {</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		}</div><div class="line">	}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. The brackets must close in the correct order, `()` and `()[]{}` are all valid but `(]` and `([)]` are not.]]>
    
    </summary>
    
      <category term="stack" scheme="http://alexyyek.github.io/tags/stack/"/>
    
      <category term="leetcode" scheme="http://alexyyek.github.io/tags/leetcode/"/>
    
      <category term="Java" scheme="http://alexyyek.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Min Stack]]></title>
    <link href="http://alexyyek.github.io/2014/11/19/Stack/"/>
    <id>http://alexyyek.github.io/2014/11/19/Stack/</id>
    <published>2014-11-19T12:54:53.000Z</published>
    <updated>2014-11-28T14:50:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Min_Stack">Min Stack</h2>
<p>Question : Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br><a id="more"></a>   </p>
<ul>
<li>push(x) — Push element x onto stack.</li>
<li>pop() — Removes the element on top of the stack.</li>
<li>top() — Get the top element.</li>
<li>getMin() — Retrieve the minimum element in the stack.<br><br></li>
</ul>
<hr>
<h3 id="Best_solution">Best solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStackBest</span> </span>{</div><div class="line">	Stack&lt;Long&gt; stack;</div><div class="line">	<span class="keyword">long</span> min = <span class="number">0</span>;</div><div class="line">	<span class="keyword">public</span> <span class="title">MinStackBest</span>() {</div><div class="line">		stack = <span class="keyword">new</span> Stack&lt;Long&gt;();</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="keyword">int</span> x) {</div><div class="line">		<span class="keyword">if</span> (stack.isEmpty()) {</div><div class="line">			stack.push(<span class="number">0</span>L);</div><div class="line">			min = x;</div><div class="line">		} <span class="keyword">else</span> {</div><div class="line">			stack.push(x - min);</div><div class="line">			<span class="keyword">if</span> (x &lt; min) {</div><div class="line">				min = x;</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span>() {</div><div class="line">		<span class="keyword">if</span> (stack.isEmpty()) {</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		}</div><div class="line">		<span class="keyword">long</span> pop = stack.pop();</div><div class="line">		<span class="keyword">if</span> (pop &lt; <span class="number">0</span>) {</div><div class="line">			min = min - pop;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span>() {</div><div class="line">		<span class="keyword">long</span> top = stack.peek();</div><div class="line">		<span class="keyword">if</span> (top &gt; <span class="number">0</span>) {</div><div class="line">			<span class="keyword">return</span> (<span class="keyword">int</span>) (min + top);</div><div class="line">		} <span class="keyword">else</span> {</div><div class="line">			<span class="keyword">return</span> (<span class="keyword">int</span>) min;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span>() {</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>) min;</div><div class="line">	}</div></pre></td></tr></table></figure>

<p>The thought is to store the gap between the current value and min value, while the only problem is int is 4 bit<br>so the Max gap = Integer.MAXVALUE - Integer.MINVALUE, and that value beyond int, so the author init the min value as long.</p>
<p><br></p>
<h3 id="Another_solution">Another solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>{</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> class Element{</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> value;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> min;</div><div class="line">		Element(<span class="keyword">int</span> value, <span class="keyword">int</span> min){</div><div class="line">			<span class="keyword">this</span>.value = value;</div><div class="line">			<span class="keyword">this</span>.min = min;</div><div class="line">		}</div><div class="line">	}</div><div class="line">	</div><div class="line">	Stack&lt;Element&gt;stack = <span class="keyword">new</span> Stack&lt;Element&gt;();</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="keyword">int</span> x) {</div><div class="line">		<span class="keyword">int</span> min = (stack.isEmpty()) ? x : Math.min(x, stack.peek().min);</div><div class="line">		stack.push(<span class="keyword">new</span> Element(x, min));</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span>() {</div><div class="line">    	stack.pop();</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span>() {</div><div class="line">    	<span class="keyword">return</span> stack.peek().value;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span>() {</div><div class="line">        <span class="keyword">return</span> stack.peek().min;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="Review_Stack">Review Stack</h2>
<p>Here’s the source code, compose by one Constructor and five Method</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line">	 * 构造函数</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="title">Stack</span>() {</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="javadoc">/**</span></div><div class="line">	 * push函数：将元素存入栈顶</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> E <span class="title">push</span>(E item) {</div><div class="line">		<span class="comment">// 将元素存入栈顶。</span></div><div class="line">		<span class="comment">// addElement()的实现在Vector.java中</span></div><div class="line">		addElement(item);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> item;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="javadoc">/**</span></div><div class="line">	 * pop函数：返回栈顶元素，并将其从栈中删除</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span>() {</div><div class="line">		E obj;</div><div class="line">		<span class="keyword">int</span> len = size();</div><div class="line"></div><div class="line">		obj = peek();</div><div class="line">		<span class="comment">// 删除栈顶元素，removeElementAt()的实现在Vector.java中</span></div><div class="line">		removeElementAt(len - <span class="number">1</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> obj;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="javadoc">/**</span></div><div class="line">	 * peek函数：返回栈顶元素，不执行删除操作</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span>() {</div><div class="line">		<span class="keyword">int</span> len = size();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (len == <span class="number">0</span>)</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</div><div class="line">		<span class="comment">// 返回栈顶元素，elementAt()具体实现在Vector.java中</span></div><div class="line">		<span class="keyword">return</span> elementAt(len - <span class="number">1</span>);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="javadoc">/**</span></div><div class="line">	 * 栈是否为空</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span>() {</div><div class="line">		<span class="keyword">return</span> size() == <span class="number">0</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="javadoc">/**</span></div><div class="line">	 * 查找“元素o”在栈中的位置：由栈底向栈顶方向数</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">search</span>(Object o) {</div><div class="line">		<span class="comment">// 获取元素索引，elementAt()具体实现在Vector.java中</span></div><div class="line">		<span class="keyword">int</span> i = lastIndexOf(o);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (i &gt;= <span class="number">0</span>) {</div><div class="line">			<span class="keyword">return</span> size() - i;</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">	}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Min_Stack">Min Stack</h2>
<p>Question : Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>]]>
    
    </summary>
    
      <category term="stack" scheme="http://alexyyek.github.io/tags/stack/"/>
    
      <category term="leetcode" scheme="http://alexyyek.github.io/tags/leetcode/"/>
    
      <category term="Java" scheme="http://alexyyek.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Single Number]]></title>
    <link href="http://alexyyek.github.io/2014/11/17/Single-Number/"/>
    <id>http://alexyyek.github.io/2014/11/17/Single-Number/</id>
    <published>2014-11-17T08:30:25.000Z</published>
    <updated>2014-11-28T14:45:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Single_Number">Single Number</h2>
<p>Question : Given an array of integers, every element appears <code>twice</code> except for one. Find that single one.<br><a id="more"></a><br><br></p>
<h3 id="Best_solution">Best solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) {</div><div class="line">			result ^= A[i];</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="My_solution">My solution</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) {</div><div class="line">			<span class="keyword">int</span> key = A[i];</div><div class="line">			<span class="keyword">if</span> (map.containsKey(key)) {</div><div class="line">				map.put(key, map.get(key) + <span class="number">1</span>);</div><div class="line">				<span class="keyword">if</span> (map.get(key) == <span class="number">2</span>) {</div><div class="line">					map.remove(key);</div><div class="line">				}</div><div class="line">			} <span class="keyword">else</span> {</div><div class="line">				map.put(key, <span class="number">1</span>);</div><div class="line">			}</div><div class="line">		}</div><div class="line">		String result = map.keySet().toString();</div><div class="line">		<span class="keyword">int</span> out = Integer.parseInt(result.substring(<span class="number">1</span>, result.length()-<span class="number">1</span>));</div><div class="line">		<span class="keyword">return</span> out;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>从性能上来评判用XOR无疑使最好的，复杂度只有O(N)。</p>
<p>我个人的方法略显笨拙，复杂度虽然也是O(N), 但开辟的多余的内存空间，不过当element出现的次数改变时，反而有更好的鲁棒性.<br><br></p>
<h3 id="change_question">change question</h3>
<p>Given an array of integers, every element appears <code>three</code> times except for one. Find that single one.<br><br></p>
<h4 id="best_answer">best answer</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span>(<span class="keyword">int</span>[] A) {</div><div class="line">    <span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++){</div><div class="line">        ones = (ones ^ A[i]) & ~twos;</div><div class="line">        twos = (twos ^ A[i]) & ~ones;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> ones;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><br></p>
<h4 id="Inference">Inference</h4>
<p>题目中改变了element的出现次数，变成了出现三次，当然用我之前的程序改个数字就能搞定，但仍需要分析一下最优的解法<br>best answer思路：出现三次，可以用2个bit来表征这三个状态，分别是00→10→01→00<br>ones和twos分别承担了这两个bit位<br>如果推理一下可以发现</p>
<blockquote>
<p>ones = ones ^ A[i]; if (twos == 1) then ones = 0, that can be tansformed to ones = (ones ^ &gt;A[i]) &amp; ~twos.</p>
<p>twos = twos ^ A[i]; if (ones == 1) then twos = 0 and twos = (twos ^ A[i]) &amp; ~ones.</p>
</blockquote>
<p><br></p>
<h2 id="回顾">回顾</h2>
<p><br></p>
<h3 id="位移动运算符:">位移动运算符:</h3>
<p><strong>&lt;&lt;</strong>表示左移, 左移一位表示原来的值乘2.</p>
<p>例如：3 &lt;&lt;2(3为int型) </p>
<blockquote>
<ol>
<li>把3转换为二进制数字0000 0000 0000 0000 0000 0000 0000 0011， </li>
<li>把该数字高位(左侧)的两个零移出，其他的数字都朝左平移2位， </li>
<li>在低位(右侧)的两个空位补零。则得到的最终结果是0000 0000 0000 0000 0000 0000 0000 1100. 转换为十进制是12。</li>
</ol>
</blockquote>
<p>同理<strong>&gt;&gt;</strong>表示右移. 右移一位表示除2. </p>
<p>低位移出(舍弃)，高位的空位补符号位，即正数补零，负数补1 </p>
<p><br></p>
<h3 id="位运算:">位运算:</h3>
<p>位运算符包括:　与（&amp;）、非（~）、或（|）、异或（^）</p>
<blockquote>
<p>&amp;：当两边操作数的位同时为1时，结果为1，否则为0。如1100&amp;1010=1000 　</p>
<p>| ：当两边操作数的位有一边为1时，结果为1，否则为0。如1100|1010=1110 　</p>
<p>~：0变1,1变0 　　</p>
<p>^：两边的位不同时，结果为1，否则为0.如1100^1010=0110</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Single_Number">Single Number</h2>
<p>Question : Given an array of integers, every element appears <code>twice</code> except for one. Find that single one.<br>]]>
    
    </summary>
    
      <category term="Bit Manipulation" scheme="http://alexyyek.github.io/tags/Bit-Manipulation/"/>
    
      <category term="leetcode" scheme="http://alexyyek.github.io/tags/leetcode/"/>
    
      <category term="Java" scheme="http://alexyyek.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java处理字符串-删除所有标点]]></title>
    <link href="http://alexyyek.github.io/2014/11/15/new/"/>
    <id>http://alexyyek.github.io/2014/11/15/new/</id>
    <published>2014-11-15T06:45:40.000Z</published>
    <updated>2014-11-28T14:44:06.000Z</updated>
    <content type="html"><![CDATA[<h3 id="代码">代码</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str = str.replaceAll(<span class="string">"[\\pP‘’“”]"</span>, <span class="string">""</span>);</div></pre></td></tr></table></figure>

<p>在这里利用的是Unicode编码，Unicode 编码并不只是为某个字符简单定义了一个编码，而且还将其进行了归类。</p>
<p><a id="more"></a><br>\pP 其中的小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。</p>
<p>大写 P 表示 Unicode 字符集七个字符属性之一：标点字符。其他六个包括：</p>
<ul>
<li>L：字母 </li>
<li>M：标记符号（一般不会单独出现）</li>
<li>Z：分隔符（比如空格、换行等）      </li>
<li>S：符号（比如数学符号、货币符号等）</li>
<li>N：数字（比如阿拉伯数字、罗马数字等）</li>
<li>C：其他字符</li>
</ul>
<p>Java 中用于 Unicode 的正则表达式数据都是由 Unicode 组织提供的。<br>Unicode 正则表达式<a href="http://www.unicode.org/reports/tr18/" target="_blank" rel="external">标准</a>（可以找到所有的子属性）<br>这个<a href="http://www.unicode.org/Public/UNIDATA/UnicodeData.txt" target="_blank" rel="external">文本文档</a>一行是一个字符，第一列是 Unicode 编码，第二列是字符名，第三列是 Unicode 属性，以及其他一些字符信息。</p>
<h3 id="实例">实例</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span> str = <span class="string">",.!，，D_NAME。！；‘’”“《》**dfs  #$%^&()-+1431221中国123漢字かどうかのjavaを決定"</span>;  </div><div class="line">str = str.replaceAll(<span class="string">"[\\pP‘’“”]"</span>, <span class="string">""</span>);  </div><div class="line">System.out.println(str);</div></pre></td></tr></table></figure>

<p>输出结果: DNAMEdfs  $^+1431221中国123漢字かどうかのjavaを決定</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="代码">代码</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str = str.replaceAll(<span class="string">"[\\pP‘’“”]"</span>, <span class="string">""</span>);</div></pre></td></tr></table></figure>

<p>在这里利用的是Unicode编码，Unicode 编码并不只是为某个字符简单定义了一个编码，而且还将其进行了归类。</p>
<p>]]>
    
    </summary>
    
      <category term="skill" scheme="http://alexyyek.github.io/tags/skill/"/>
    
      <category term="Java" scheme="http://alexyyek.github.io/categories/Java/"/>
    
  </entry>
  
</feed>
